var Execution = require('execution');
var path = require('path');
var glob = require('glob');
var file = require('easyfile');
var _ = require('lodash');
var Record = require('record');

module.exports = Execution.extend({
    // The type of option could be HTML5 input types: file, directory, number, range, select,
    // url, email, tel, color, date, time, month, time, week, datetime(datetime-local),
    // string(text), boolean(checkbox), array, regexp, function and object.
    options: {
        name: {
            label: 'Package name',
            type: 'string'
        },
        src: {
            label: 'Src file',
            type: 'string'
        },
        dest: {
            label: 'Dest file',
            type: 'string'
        },
        combo: {
            label: 'Generate modules with online combo mode to dest dir',
            type: 'boolean'
        },
        dep: {
            label: 'Generate all online combo mode modules dependence config in dependence config file',
            type: 'string'
        },
        base: {
            label: 'Combo src base'
        },
        packages: {
            label: 'KISSY package config',
            type: 'object'
        },
        charset: {
            label: 'File charset',
            type: 'string',
            default: 'utf8'
        },
        modules: {
            label: 'KISSY module config',
            type: 'object'
        }
    },
    run: function (inputs, options, logger, settings) {
        return this._run(inputs, options, logger, settings);
    },
    execute: function (resolve, reject) {
        var options = this.options;
        var inputs = this.inputs;
        var logger = this.logger;
        var packages = options.packages || {};
        var modules = options.modules || {};
        var name = options.name;
        var src = path.resolve(options.src);
        var dest = path.resolve(options.dest);
        var base = path.resolve(options.base || '');
        var dep = options.dep && path.resolve(options.dep);
        var charset = options.charset;
        var combo = options.combo;

        logger.log('Build KISSY modules with', src);

        var defaultPackage = {
            name: name,
            path: path.dirname(src),
            // hack for kmc
            base: path.dirname(src),
            ignorePackageNameInUri: true
        };

        if(Array.isArray(packages)){
            packages.push(
                defaultPackage
            );
        }else if(name && !packages[name]){
            packages[name] = defaultPackage
        }

        var kmc = require('kmc');
        kmc.config({
            packages: packages,
            modules: modules
        });

        var records = [];

        if(combo){

            var dependenciesResults = {};

            glob.sync(src).forEach(function(inputFile){
                // /path/to/src/file
                inputFile = path.resolve(inputFile);
                var destFile = path.join(dest, path.relative(base, inputFile));

                // Only do module name fix
                var info = kmc.info(inputFile);
                var dependencies = info.dependencies;
                var modules = info.modules;

                _.each(modules, function(mod){
                    if(path.resolve(mod.path) === inputFile){

                        records.push(new Record({
                            path: destFile,
                            contents: mod.contents,
                            encoding: charset
                        }));

                        logger.log('File', mod.path, 'generated as', mod.name, 'to', destFile);
                    }
                });

                _.extend(dependenciesResults, dependencies);
            });

            if(dep){

                var mapResults = '/* Generated by task-kmc */\n' +
                    "KISSY.config('modules'," + JSON.stringify(dependenciesResults || {}, null, '  ') + ");";


                records.push(new Record({
                    path: dep,
                    contents: mapResults,
                    encoding: charset,
                    kissyConfig: true
                }));

                logger.log('Modules config file ' + dep + ' generated')
            }


        }else{

            kmc.build({
                src: src,
                dest: dest,
                depPath: dep
            });

            logger.log('File ' + dest + ' generated')
        }

        // Only combo mode will streaming files.
        resolve(inputs.concat(records));
    }
})
